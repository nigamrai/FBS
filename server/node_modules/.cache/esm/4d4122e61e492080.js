let Joi,User,CustomErrorHandler,cloudinary,bcrypt,fs;_1e4‍.x([["default",()=>_1e4‍.o]]);_1e4‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_1e4‍.w("../models/user.model",[["default",["User"],function(v){User=v}]]);_1e4‍.w("../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_1e4‍.w("cloudinary",[["default",["cloudinary"],function(v){cloudinary=v}]]);_1e4‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_1e4‍.w("fs/promises",[["default",["fs"],function(v){fs=v}]]);





const userController={
    async register(req,res,next){
       const registerSchema=Joi.object({
        name:Joi.string().min(5).max(50).required(),
        email:Joi.string().trim().email().required(),
        password:Joi.string().pattern(new RegExp(/^(?=.*\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)).required(),
        confirmPassword:Joi.ref('password')
       })
       const {error}=registerSchema.validate(req.body);
       if(error){
        return next(error);
       }
       const{name,email,password,confirmPassword}=req.body;
       try{
        const exist=await User.exists({email});
        if(exist){
            return next(CustomErrorHandler.alreadyExists("User with this email already exists. Please try again with different email"));
        }
       }catch(error){
        return next(error)
       }
       const hashedPassword=await bcrypt.hash(password,10);
       const user=await User.create({
        name,
        email,
        password:hashedPassword,
        avatar:{
            public_id:email,
            secure_url:'https://res.cloudinary.com/du9jzqlpt/image/upload/v1674647316/avatar_drzgxv.jpg'
        }
       })
       if(req.file){
        try{
            const result=await cloudinary.v2.uploader.upload({
                folder:'FBS',
                width:250,
                height:250,
                gravity:'faces',
                crop:'fill'
            })
            if(result){
                user.avatar.public_id=result.public_id;
                user.avatar.secure_url=result.secure_url;
                fs.remove(`uploads/${req.file.filename}`);
            } 
            
        }catch(error){
            return next(CustomErrorHandler.imageNotUploaded());
        }
       }
       await user.save();
       user.password=undefined;
       res.status(200).json({
        success:"true",
        message:"User Registered Succesfully",
        user
       })
    }
}

_1e4‍.d(userController);